#summary Note on DTD Compatibility Implementation.

=Note on DTD Compatibility Implementation=
<br>

The implementation of the DTD compatibility features is independent from the validation implementation and it is possible to control which features and levels are to be processed from the command line, or through the {{{setFeature(String name, boolean value)}}} methods of the JAXP validation API. Furthermore, when a schema document contains errors with impact on the DTD compatibility handling, implementations of the abstract class {{{serene.SereneRecoverableException}}} extending {{{org.xml.sax.SAXParseException}}} are used, so that they can be caught separately and the features set in the {{{javax.xml.validation.ValidatorHandler}}} and {{{javax.xml.validation.Validator}}} can be adjusted. Concrete implementations are:

 * {{{serene.dtdcompatibility.AttributeDefaultValueException}}} for attribute default values
 * {{{serene.dtdcompatibility.AttributeIdTypeException}}} for attributes of ID-type ID, IDREF, IDREFS
 * {{{serene.dtdcompatibility.DocumentationElementException}}} for documentation elements

Even when the compatibility property does not hold for one of the features, this allows the schema to still be safely used for validation and the other compatibility features. In order to provide direct access, without the need to cast, to those classes the interface {{{serene.dtdcompatibility.DTDCompatibilityErrorHandler}}}, extending {{{org.xml.sax.ErrorHandler}}}, has been created. 

It is the client's responsibility to ensure that the errors are caught in an appropriate manner and the right features are set. When attempting to use an instance of {{{javax.xml.validation.ValidatorHandler}}} or {{{javax.xml.validation.Validator}}} an {{{IllegalStateException}}} is thrown if schema document contained errors that made it impossible to support a certain feature and that feature is set to true. When attempting to set to true a feature in the {{{javax.xml.validation.ValidatorHandler}}} or {{{javax.xml.validation.Validator}}} an {{{org.xml.sax.SAXNotSupportedException}}} is thrown if schema document contained errors that made it impossible to support that feature or if corresponding level 1 features were not set in the {{{javax.xml.validation.SchemaFactory}}}.

For attribute default values, the specification requires that "the value of the a:defaultValue attribute matches the pattern contained in the attribute element", but it is not clear if the _soundness_ relation for the ID, IDREF, IDREFS should be regarded as part of the pattern. I chose to check during the compatibility property control, provided apropriate features were set, if this relashionship holds, but only issue warnings. The reason for this is that there are many situations where the document can be correct even if the default values used in the schema would result in errors, but if error messages were to be issued, than, according to the general strategy described above, the client should have to unset the features and not continue the compatibility processing of the document for them. On the other hand it seems natural that the user gets some kind of message, especially where the ID-type is ID. 